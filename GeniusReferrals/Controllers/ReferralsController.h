//
//  ReferralsController.h
//  GeniusReferrals
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 02/18/2017
//
#import <Foundation/Foundation.h>
#import "Configuration.h"
#import "APIHelper.h"
#import "APIError.h"
#import "BaseController.h"
#import "UnirestClient.h"
#import "HttpContext.h"
#import "ReferralForm.h"

@interface ReferralsController : BaseController

/**
* Completion block definition for asynchronous call to Get Referral Origin */
typedef void (^CompletedGetReferralOrigin)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* Get a referral origin by a given slug.
* @param    referralOriginSlug    Required parameter: The referral origin identifier
*/
- (void) getReferralOriginAsyncWithReferralOriginSlug:(NSString*) referralOriginSlug
                completionBlock:(CompletedGetReferralOrigin) onCompleted;

/**
* Completion block definition for asynchronous call to Get Referral Origins */
typedef void (^CompletedGetReferralOrigins)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* Get referral origins. This is needed when creating (POST) a new referral, as referral_origin_slug refers to one of this origins.
*/
- (void) getReferralOriginsWithCompletionBlock:(CompletedGetReferralOrigins) onCompleted;

/**
* Completion block definition for asynchronous call to Get Referral */
typedef void (^CompletedGetReferral)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* Get a referral by a given id.
* @param    accountSlug    Required parameter: The account identifier
* @param    advocateToken    Required parameter: The advocate's token
* @param    referralId    Required parameter: The referral id
*/
- (void) getReferralAsyncWithAccountSlug:(NSString*) accountSlug
                advocateToken:(NSString*) advocateToken
                referralId:(NSString*) referralId
                completionBlock:(CompletedGetReferral) onCompleted;

/**
* Completion block definition for asynchronous call to Delete Referral */
typedef void (^CompletedDeleteReferral)(BOOL success, HttpContext* context, NSError* error);

/**
* Delete a referral.
* @param    accountSlug    Required parameter: The account identifier
* @param    advocateToken    Required parameter: The advocate's token
* @param    referralId    Required parameter: The referral identifier
*/
- (void) deleteReferralAsyncWithAccountSlug:(NSString*) accountSlug
                advocateToken:(NSString*) advocateToken
                referralId:(NSString*) referralId
                completionBlock:(CompletedDeleteReferral) onCompleted;

/**
* Completion block definition for asynchronous call to Post Referral */
typedef void (^CompletedPostReferral)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* Create a new referral.
* @param    accountSlug    Required parameter: The account identifier
* @param    advocateToken    Required parameter: The advocate's token
* @param    referralForm    Required parameter: The body of the request
*/
- (void) postReferralAsyncWithAccountSlug:(NSString*) accountSlug
                advocateToken:(NSString*) advocateToken
                referralForm:(ReferralForm*) referralForm
                completionBlock:(CompletedPostReferral) onCompleted;

/**
* Completion block definition for asynchronous call to Put Referral */
typedef void (^CompletedPutReferral)(BOOL success, HttpContext* context, NSError* error);

/**
* Update a referral.
* @param    accountSlug    Required parameter: The account identifier
* @param    advocateToken    Required parameter: The advocate's token
* @param    referralId    Required parameter: The referral id
* @param    referralForm    Required parameter: The body of the request
*/
- (void) putReferralAsyncWithAccountSlug:(NSString*) accountSlug
                advocateToken:(NSString*) advocateToken
                referralId:(NSString*) referralId
                referralForm:(ReferralForm*) referralForm
                completionBlock:(CompletedPutReferral) onCompleted;

/**
* Completion block definition for asynchronous call to Get Referrals */
typedef void (^CompletedGetReferrals)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* Get the list of referrals for a given advocate.
* @param    accountSlug    Required parameter: The account identifier
* @param    advocateToken    Required parameter: The advocate's token
* @param    page    Optional parameter: Page number, e.g. 1 would start at the first result, and 10 would start at the tenth result.
* @param    limit    Optional parameter: Maximum number of results to return in the response. Default (10), threshold (100)
* @param    filter    Optional parameter: Allowed fields: url, referral_origin_slug, created. Use the following delimiters to build your filters params. Use the following delimiters to build your filters params. The vertical bar ('\|') to separate individual filter phrases and a double colon ('::') to separate the names and values. The delimiter of the double colon (':') separates the property name from the comparison value, enabling the comparison value to contain spaces. Example: www.example.com/users?filter='name::todd\|city::denver\|title::grand poobah'
* @param    sort    Optional parameter: Allowed fields: created. Use sort query-string parameter that contains a delimited set of property names. For each property name, sort in ascending order, and for each property prefixed with a dash ('-') sort in descending order. Separate each property name with a vertical bar ('\|'), which is consistent with the separation of the name\|value pairs in filtering, above. For example, if we want to retrieve users in order of their last name (ascending), first name (ascending) and hire date (descending), the request might look like this www.example.com/users?sort='last_name\|first_name\|-hire_date'
*/
- (void) getReferralsAsyncWithAccountSlug:(NSString*) accountSlug
                advocateToken:(NSString*) advocateToken
                page:(NSNumber*) page
                limit:(NSNumber*) limit
                filter:(NSString*) filter
                sort:(NSString*) sort
                completionBlock:(CompletedGetReferrals) onCompleted;

@end