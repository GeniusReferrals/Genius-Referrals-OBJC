//
//  AdvocatesController.h
//  GeniusReferrals
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 02/18/2017
//
#import <Foundation/Foundation.h>
#import "Configuration.h"
#import "APIHelper.h"
#import "APIError.h"
#import "BaseController.h"
#import "UnirestClient.h"
#import "HttpContext.h"
#import "AdvocateForm.h"
#import "AdvocatePatchForm.h"
#import "PaymentMethodForm.h"

@interface AdvocatesController : BaseController

/**
* Completion block definition for asynchronous call to Delete Advocate */
typedef void (^CompletedDeleteAdvocate)(BOOL success, HttpContext* context, NSError* error);

/**
* Delete an advocate
* @param    accountSlug    Required parameter: The account identifier
* @param    advocateToken    Required parameter: The advocate's token
*/
- (void) deleteAdvocateAsyncWithAccountSlug:(NSString*) accountSlug
                advocateToken:(NSString*) advocateToken
                completionBlock:(CompletedDeleteAdvocate) onCompleted;

/**
* Completion block definition for asynchronous call to Put Advocate */
typedef void (^CompletedPutAdvocate)(BOOL success, HttpContext* context, NSError* error);

/**
* Update an advocate.
* @param    accountSlug    Required parameter: The account identifier
* @param    advocateToken    Required parameter: The advocate's token
* @param    advocateForm    Required parameter: The body of the request
*/
- (void) putAdvocateAsyncWithAccountSlug:(NSString*) accountSlug
                advocateToken:(NSString*) advocateToken
                advocateForm:(AdvocateForm*) advocateForm
                completionBlock:(CompletedPutAdvocate) onCompleted;

/**
* Completion block definition for asynchronous call to Post Advocate */
typedef void (^CompletedPostAdvocate)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* Create a new advocate.
* @param    accountSlug    Required parameter: The account identifier
* @param    advocateForm    Required parameter: The body of the request
*/
- (void) postAdvocateAsyncWithAccountSlug:(NSString*) accountSlug
                advocateForm:(AdvocateForm*) advocateForm
                completionBlock:(CompletedPostAdvocate) onCompleted;

/**
* Completion block definition for asynchronous call to Get Advocate */
typedef void (^CompletedGetAdvocate)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* Get an advocate by a given token.
* @param    accountSlug    Required parameter: The account identifier
* @param    advocateToken    Required parameter: The advocate's token
*/
- (void) getAdvocateAsyncWithAccountSlug:(NSString*) accountSlug
                advocateToken:(NSString*) advocateToken
                completionBlock:(CompletedGetAdvocate) onCompleted;

/**
* Completion block definition for asynchronous call to Delete Advocates */
typedef void (^CompletedDeleteAdvocates)(BOOL success, HttpContext* context, NSError* error);

/**
* Delete all advocates
* @param    accountSlug    Required parameter: The account identifier
*/
- (void) deleteAdvocatesAsyncWithAccountSlug:(NSString*) accountSlug
                completionBlock:(CompletedDeleteAdvocates) onCompleted;

/**
* Completion block definition for asynchronous call to Get Advocates */
typedef void (^CompletedGetAdvocates)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* Get the list of advocates
* @param    accountSlug    Required parameter: The account identifier
* @param    page    Optional parameter: Page number, e.g. 1 would start at the first result, and 10 would start at the tenth result.
* @param    limit    Optional parameter: Maximum number of results to return in the response. Default (10), threshold (100)
* @param    filter    Optional parameter: Allowed fields: name, lastname, email, advocate_token, bonus_exchange_method_slug, campaign_slug, can_refer, is_referral, from, to, created. Use the following delimiters to build your filters params. The vertical bar ('\|') to separate individual filter phrases and a double colon ('::') to separate the names and values. The delimiter of the double colon (':') separates the property name from the comparison value, enabling the comparison value to contain spaces. Example: www.example.com/users?filter='name::todd\|city::denver\|title::grand poobah'
* @param    sort    Optional parameter: Allowed fields: name, lastname, email, created. Use sort query-string parameter that contains a delimited set of property names. For each property name, sort in ascending order, and for each property prefixed with a dash ('-') sort in descending order. Separate each property name with a vertical bar ('\|'), which is consistent with the separation of the name\|value pairs in filtering, above. For example, if we want to retrieve users in order of their last name (ascending), first name (ascending) and hire date (descending), the request might look like this www.example.com/users?sort='last_name\|first_name\|-hire_date'
*/
- (void) getAdvocatesAsyncWithAccountSlug:(NSString*) accountSlug
                page:(NSNumber*) page
                limit:(NSNumber*) limit
                filter:(NSString*) filter
                sort:(NSString*) sort
                completionBlock:(CompletedGetAdvocates) onCompleted;

/**
* Completion block definition for asynchronous call to Patch Advocate */
typedef void (^CompletedPatchAdvocate)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* Update partial elements of an advocate.
* @param    accountSlug    Required parameter: The account identifier
* @param    advocateToken    Required parameter: The advocate's token
* @param    advocatePatchForm    Required parameter: The body of the request
*/
- (void) patchAdvocateAsyncWithAccountSlug:(NSString*) accountSlug
                advocateToken:(NSString*) advocateToken
                advocatePatchForm:(NSArray<AdvocatePatchForm> *) advocatePatchForm
                completionBlock:(CompletedPatchAdvocate) onCompleted;

/**
* Completion block definition for asynchronous call to Get Share Links */
typedef void (^CompletedGetShareLinks)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* Get the advocates share links. These are the links that advocates use to share your services online.  Share links are wrapped per campaign and widget package.
* @param    accountSlug    Required parameter: The account identifier
* @param    advocateToken    Required parameter: The advocate's token
*/
- (void) getShareLinksAsyncWithAccountSlug:(NSString*) accountSlug
                advocateToken:(NSString*) advocateToken
                completionBlock:(CompletedGetShareLinks) onCompleted;

/**
* Completion block definition for asynchronous call to Put Payment Method */
typedef void (^CompletedPutPaymentMethod)(BOOL success, HttpContext* context, NSError* error);

/**
* Update a payment method.
* @param    accountSlug    Required parameter: The advocate's token
* @param    advocateToken    Required parameter: The advocate's token
* @param    advocatePaymentMethodId    Required parameter: The payment method's identifier
* @param    advocatePaymentMethodForm    Required parameter: The body of the request
*/
- (void) putPaymentMethodAsyncWithAccountSlug:(NSString*) accountSlug
                advocateToken:(NSString*) advocateToken
                advocatePaymentMethodId:(int) advocatePaymentMethodId
                advocatePaymentMethodForm:(PaymentMethodForm*) advocatePaymentMethodForm
                completionBlock:(CompletedPutPaymentMethod) onCompleted;

/**
* Completion block definition for asynchronous call to Get Payment Method */
typedef void (^CompletedGetPaymentMethod)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* Get an advocate's payment method
* @param    accountSlug    Required parameter: The account identifier
* @param    advocateToken    Required parameter: The advocate's token
* @param    advocatePaymentMethodId    Required parameter: The payment method's identifier
*/
- (void) getPaymentMethodAsyncWithAccountSlug:(NSString*) accountSlug
                advocateToken:(NSString*) advocateToken
                advocatePaymentMethodId:(int) advocatePaymentMethodId
                completionBlock:(CompletedGetPaymentMethod) onCompleted;

/**
* Completion block definition for asynchronous call to Post Payment Method */
typedef void (^CompletedPostPaymentMethod)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* Create a new payment method.
* @param    accountSlug    Required parameter: The account identifier
* @param    advocateToken    Required parameter: The advocate's token
* @param    advocatePaymentMethodForm    Required parameter: The body of the request
*/
- (void) postPaymentMethodAsyncWithAccountSlug:(NSString*) accountSlug
                advocateToken:(NSString*) advocateToken
                advocatePaymentMethodForm:(PaymentMethodForm*) advocatePaymentMethodForm
                completionBlock:(CompletedPostPaymentMethod) onCompleted;

/**
* Completion block definition for asynchronous call to Get Bonus Redemption Method */
typedef void (^CompletedGetBonusRedemptionMethod)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* Get bonuses redemption method.
* @param    bonusesRedemptionMethodSlug    Required parameter: The bonus redemption method's identifier
*/
- (void) getBonusRedemptionMethodAsyncWithBonusesRedemptionMethodSlug:(NSString*) bonusesRedemptionMethodSlug
                completionBlock:(CompletedGetBonusRedemptionMethod) onCompleted;

/**
* Completion block definition for asynchronous call to Get Bonus Redemption Methods */
typedef void (^CompletedGetBonusRedemptionMethods)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* Get bonuses redemption methods.
*/
- (void) getBonusRedemptionMethodsWithCompletionBlock:(CompletedGetBonusRedemptionMethods) onCompleted;

/**
* Completion block definition for asynchronous call to Get Currencies */
typedef void (^CompletedGetCurrencies)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* Get currencies.
*/
- (void) getCurrenciesWithCompletionBlock:(CompletedGetCurrencies) onCompleted;

/**
* Completion block definition for asynchronous call to Get Currency */
typedef void (^CompletedGetCurrency)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* Get a currency.
* @param    code    Required parameter: The currency's code
*/
- (void) getCurrencyAsyncWithCode:(NSString*) code
                completionBlock:(CompletedGetCurrency) onCompleted;

/**
* Completion block definition for asynchronous call to Get Payment Methods */
typedef void (^CompletedGetPaymentMethods)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* Get the advocate's payment methods.
* @param    accountSlug    Required parameter: The account identifier
* @param    advocateToken    Required parameter: The advocate's token
* @param    page    Optional parameter: Page number, e.g. 1 would start at the first result, and 10 would start at the tenth result.
* @param    limit    Optional parameter: Maximum number of results to return in the response. Default (10), threshold (100)
* @param    filter    Optional parameter: Allowed fields: username, is_active. Use the following delimiters to build your filters params. The vertical bar ('\|') to separate individual filter phrases and a double colon ('::') to separate the names and values. The delimiter of the double colon (':') separates the property name from the comparison value, enabling the comparison value to contain spaces. Example: www.example.com/users?filter='name::todd\|city::denver\|title::grand poobah'
* @param    sort    Optional parameter: Allowed fields: username, created. Use sort query-string parameter that contains a delimited set of property names. For each property name, sort in ascending order, and for each property prefixed with a dash ('-') sort in descending order. Separate each property name with a vertical bar ('\|'), which is consistent with the separation of the name\|value pairs in filtering, above. For example, if we want to retrieve users in order of their last name (ascending), first name (ascending) and hire date (descending), the request might look like this www.example.com/users?sort=last_name\|first_name\|-hire_date
*/
- (void) getPaymentMethodsAsyncWithAccountSlug:(NSString*) accountSlug
                advocateToken:(NSString*) advocateToken
                page:(NSNumber*) page
                limit:(NSNumber*) limit
                filter:(NSString*) filter
                sort:(NSString*) sort
                completionBlock:(CompletedGetPaymentMethods) onCompleted;

@end