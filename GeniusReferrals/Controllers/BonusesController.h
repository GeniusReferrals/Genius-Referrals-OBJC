//
//  BonusesController.h
//  GeniusReferrals
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 02/17/2017
//
#import <Foundation/Foundation.h>
#import "Configuration.h"
#import "APIHelper.h"
#import "APIError.h"
#import "BaseController.h"
#import "UnirestClient.h"
#import "HttpContext.h"
#import "BonusesForm.h"
#import "BonusesForm1.h"

@interface BonusesController : BaseController

/**
* Completion block definition for asynchronous call to Get Bonuses */
typedef void (^CompletedGetBonuses)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* Get the list of bonuses for a given account.
* @param    accountSlug    Required parameter: The account identifier
* @param    page    Optional parameter: Page number, e.g. 1 would start at the first result, and 10 would start at the tenth result.
* @param    limit    Optional parameter: Maximum number of results to return in the response. Default (10), threshold (100)
* @param    filter    Optional parameter: Allowed fields: name, lastname, email, campaign_slug, from, to, created. Use the following delimiters to build your filters params. The vertical bar ('\|') to separate individual filter phrases and a double colon ('::') to separate the names and values. The delimiter of the double colon (':') separates the property name from the comparison value, enabling the comparison value to contain spaces. Example: www.example.com/users?filter='name::todd\|city::denver\|title::grand poobah'
* @param    sort    Optional parameter: Allowed fields: name, lastname, email, created. Use sort query-string parameter that contains a delimited set of property names. For each property name, sort in ascending order, and for each property prefixed with a dash ('-') sort in descending order. Separate each property name with a vertical bar ('\|'), which is consistent with the separation of the name\|value pairs in filtering, above. For example, if we want to retrieve users in order of their last name (ascending), first name (ascending) and hire date (descending), the request might look like this www.example.com/users?sort='last_name\|first_name\|-hire_date'
*/
- (void) getBonusesAsyncWithAccountSlug:(NSString*) accountSlug
                page:(NSNumber*) page
                limit:(NSNumber*) limit
                filter:(NSString*) filter
                sort:(NSString*) sort
                completionBlock:(CompletedGetBonuses) onCompleted;

/**
* Completion block definition for asynchronous call to Post Bonuses */
typedef void (^CompletedPostBonuses)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* Make an attempt to give a bonus for to the advocate's referrer. The system processes the given advocate (referral) and creates a bonus for the advocate's referrer if is needed. All restrictions set on the campaigns for this account will be check out before giving the bonus to the advocate's referrer.
* @param    accountSlug    Required parameter: The account identifier
* @param    bonusesForm    Required parameter: The body of the request
*/
- (void) postBonusesAsyncWithAccountSlug:(NSString*) accountSlug
                bonusesForm:(BonusesForm*) bonusesForm
                completionBlock:(CompletedPostBonuses) onCompleted;

/**
* Completion block definition for asynchronous call to Bonuses Checkup */
typedef void (^CompletedGetBonusesCheckup)(BOOL success, HttpContext* context, NSData* response, NSError* error);

/**
* Check if there is a bonus to be given to the advocate. Allows the clients to check if there is a bonus to be given, it simulates the behaivor of a POST request to /accounts/{account_slug}/bonuses resource. This resource is idempotent.
* @param    accountSlug    Required parameter: The account identifier
* @param    advocateToken    Required parameter: The referral's token. Usually the one that completed the purchase, or trigger an event.
* @param    reference    Required parameter: The reference number for this request. Usually the order_id, payment_id, or timestamp.
* @param    paymentAmount    Required parameter: The payment amount the referrals has made. Required for a percentage based campaign.
*/
- (void) getBonusesCheckupAsyncWithAccountSlug:(NSString*) accountSlug
                advocateToken:(NSString*) advocateToken
                reference:(NSString*) reference
                paymentAmount:(double) paymentAmount
                completionBlock:(CompletedGetBonusesCheckup) onCompleted;

/**
* Completion block definition for asynchronous call to Post Bonuses Force */
typedef void (^CompletedPostBonusesForce)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* Force the system to give a bonus to an advocate. The system will not take into account the restriccions specified on the campaigns.
* @param    accountSlug    Required parameter: The account identifier
* @param    bonusForm    Required parameter: The body of the request
*/
- (void) postBonusesForceAsyncWithAccountSlug:(NSString*) accountSlug
                bonusForm:(BonusesForm1*) bonusForm
                completionBlock:(CompletedPostBonusesForce) onCompleted;

/**
* Completion block definition for asynchronous call to Get Bonuses Trace */
typedef void (^CompletedGetBonusesTrace)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* Get a bonus request trace.
* @param    accountSlug    Required parameter: The account identifier
* @param    traceId    Required parameter: The trace id
*/
- (void) getBonusesTraceAsyncWithAccountSlug:(NSString*) accountSlug
                traceId:(int) traceId
                completionBlock:(CompletedGetBonusesTrace) onCompleted;

/**
* Completion block definition for asynchronous call to Delete Bonus */
typedef void (^CompletedDeleteBonus)(BOOL success, HttpContext* context, NSError* error);

/**
* Delete a bonus
* @param    accountSlug    Required parameter: The account identifier
* @param    bonusId    Required parameter: The bonus id
*/
- (void) deleteBonusAsyncWithAccountSlug:(NSString*) accountSlug
                bonusId:(int) bonusId
                completionBlock:(CompletedDeleteBonus) onCompleted;

/**
* Completion block definition for asynchronous call to Get Bonus */
typedef void (^CompletedGetBonus)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* Get a bonus by a given id.
* @param    accountSlug    Required parameter: The account identifier
* @param    bonusId    Required parameter: The bonus id
*/
- (void) getBonusAsyncWithAccountSlug:(NSString*) accountSlug
                bonusId:(int) bonusId
                completionBlock:(CompletedGetBonus) onCompleted;

/**
* Completion block definition for asynchronous call to Get Bonuses Traces */
typedef void (^CompletedGetBonusesTraces)(BOOL success, HttpContext* context, id response, NSError* error);

/**
* Get the list of bonuses traces (audit trail). Every time the system tries to give a bonus the an advocate a new trace is created.
* @param    accountSlug    Required parameter: The account identifier
* @param    page    Optional parameter: Page number, e.g. 1 would start at the first result, and 10 would start at the tenth result.
* @param    limit    Optional parameter: Maximum number of results to return in the response. Default (10), threshold (100)
* @param    filter    Optional parameter: Allowed fields: reference, result, bonus_amount, advocate_token, advocate_referrer_token, campaign_slug, from, to, created. Use the following delimiters to build your filters params. The vertical bar ('\|') to separate individual filter phrases and a double colon ('::') to separate the names and values. The delimiter of the double colon (':') separates the property name from the comparison value, enabling the comparison value to contain spaces. Example: www.example.com/users?filter='name::todd\|city::denver\|title::grand poobah'
* @param    sort    Optional parameter: Allowed fields: created. Use sort query-string parameter that contains a delimited set of property names. For each property name, sort in ascending order, and for each property prefixed with a dash ('-') sort in descending order. Separate each property name with a vertical bar ('\|'), which is consistent with the separation of the name\|value pairs in filtering, above. For example, if we want to retrieve users in order of their last name (ascending), first name (ascending) and hire date (descending), the request might look like this www.example.com/users?sort='last_name\|first_name\|-hire_date'
*/
- (void) getBonusesTracesAsyncWithAccountSlug:(NSString*) accountSlug
                page:(NSNumber*) page
                limit:(NSNumber*) limit
                filter:(NSString*) filter
                sort:(NSString*) sort
                completionBlock:(CompletedGetBonusesTraces) onCompleted;

@end